/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package Vista;

import Controlador.Tienda;
import Modelo.Comprar;
import Modelo.Reparar;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author juald
 */
public class Generador extends java.awt.Frame {

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            ExecutorService thpReparadores = Executors.newFixedThreadPool(10);
            ExecutorService thpCompradores = Executors.newFixedThreadPool(10);
            ArrayList<Future<Integer>> resultados1 = new ArrayList();
            ArrayList<Future<Integer>> resultados2 = new ArrayList();

            Generador ventana = new Generador();
            CanvasTienda cv = new CanvasTienda(870, 600);
            Tienda tienda = new Tienda(cv);
            ventana.setSize(870, 600);
            ventana.add(cv);
            ventana.setVisible(true);

            Random aleatorio = new Random();
            int reparaOcompra = 0;

            for (int i = 0; i < 50; i++) {
                try {
                    reparaOcompra = aleatorio.nextInt(10) + 1;
                    if (reparaOcompra <= 6) {
                        Comprar c = new Comprar(i+1, cv, tienda);
                        Future<Integer> f1 = thpCompradores.submit(c);
                        resultados1.add(f1);
                        Thread.sleep((long) (0.5 * 1000));
                    } else {
                        Reparar r = new Reparar(i+1, cv, tienda);
                        Future<Integer> f2 = thpReparadores.submit(r);
                        resultados2.add(f2);
                        Thread.sleep((long) (0.5 * 1000));
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            thpCompradores.shutdown();
            thpReparadores.shutdown();

            for (int i = 0; i < resultados1.size(); i++) {
                try {
                    Future f = resultados1.get(i);
                    System.out.println("Resultados 1: " + f.get());
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            for (int i = 0; i < resultados2.size(); i++) {
                try {
                    Future f = resultados2.get(i);
                    System.out.println("Resultados 2: " + f.get());
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(3000);
        } catch (InterruptedException ex) {
            Logger.getLogger(Generador.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
